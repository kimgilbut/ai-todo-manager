# AI 할 일 관리 프로젝트 - Cursor Rules

AI 기반 할 일 관리 애플리케이션 개발을 위한 전문 AI 어시스턴트입니다. Next.js 15, React 19, TypeScript, AI SDK로 구축된 프로젝트의 코드 품질과 일관성을 유지하기 위해 다음 규칙을 따라주세요.

## 프로젝트 개요

현대적인 React 애플리케이션 구성:
- **프레임워크**: Next.js 15 App Router + Turbopack
- **UI**: shadcn/ui 컴포넌트 + Radix UI 프리미티브
- **스타일링**: Tailwind CSS 4 + CSS 변수
- **AI**: Google AI SDK + React 훅
- **폼**: React Hook Form + Zod 검증
- **상태관리**: React 훅 + Context
- **아이콘**: Lucide React
- **알림**: Sonner

## 핵심 개발 원칙

### 1. TypeScript 및 타입 안전성
- 엄격한 TypeScript 사용 및 적절한 타입 정의
- `any` 타입보다 명시적 타입 선호
- 데이터 검증을 위한 Zod 스키마 사용
- Props 및 API 응답을 위한 적절한 인터페이스 정의
- 컴포넌트 prop 타입에 `React.ComponentProps<>` 사용
- **모든 함수와 변수에 한글 주석 필수**

### 2. Next.js App Router 패턴
- 기본적으로 Server Components 사용, 필요시에만 "use client" 추가
- API 라우트는 `app/api/` 디렉토리에 배치
- SEO를 위한 적절한 metadata export 사용
- 적절한 loading.tsx 및 error.tsx 파일 구현
- Next.js 15 규칙 및 모범 사례 준수
- **한글 주석으로 라우트 목적 명시**

### 3. 컴포넌트 아키텍처 (함수형 컴포넌트 필수)
- shadcn/ui 컴포넌트 패턴 및 구조 준수
- 복잡한 UI 요소에 합성 컴포넌트 사용
- 슬롯을 통한 적절한 컴포넌트 합성 구현
- 컴포넌트 변형에 class-variance-authority (cva) 사용
- `components/ui/`의 기존 shadcn/ui 파일 구조 준수
- **모든 컴포넌트는 함수형으로 작성**
- **컴포넌트 목적과 props에 대한 한글 주석 필수**

### 4. 스타일링 가이드라인 (Tailwind CSS 필수)
- Tailwind CSS만을 사용한 스타일링 (다른 CSS 프레임워크 금지)
- shadcn/ui의 CSS 변수 접근 방식으로 테마 설정
- 의미적 색상 토큰 사용 (primary, secondary, accent 등)
- 모바일 우선 반응형 디자인 구현
- 조건부 클래스에 `cn()` 유틸리티 함수 사용
- **스타일 클래스 선택 이유를 한글 주석으로 명시**

### 5. AI 통합
- AI SDK React 훅 사용 (`useChat`, `useCompletion` 등)
- AI 응답에 대한 철저한 오류 처리 구현
- 적절한 스트리밍 응답 사용
- 채팅 인터페이스를 위한 AI SDK 모범 사례 준수
- **AI 기능에 대한 한글 주석 및 오류 처리 필수**

## 파일 구조

```
├── app/                    # Next.js App Router
│   ├── api/               # API 라우트
│   ├── globals.css        # CSS 변수를 포함한 전역 스타일
│   ├── layout.tsx         # 루트 레이아웃
│   └── page.tsx           # 홈 페이지
├── components/
│   ├── ui/                # shadcn/ui 컴포넌트
│   └── [feature]/         # 기능별 컴포넌트
├── hooks/                 # 커스텀 React 훅
├── lib/
│   └── utils.ts           # 유틸리티 함수 (cn 등)
└── public/                # 정적 자산
```

## 코드 스타일 및 규칙

### 컴포넌트 구조 (함수형 필수)
```typescript
"use client" // 필요한 경우에만 사용

import * as React from "react"
import { ComponentProps } from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

// 컴포넌트 변형 정의 (해당되는 경우)
const componentVariants = cva(
  "base-classes", // 기본 클래스
  {
    variants: {
      variant: {
        default: "variant-classes", // 기본 변형 스타일
      },
      size: {
        default: "size-classes", // 기본 크기 스타일
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

// 컴포넌트 Props 인터페이스 정의
interface ComponentProps 
  extends ComponentProps<"div">,
    VariantProps<typeof componentVariants> {
  // 추가 props 정의
}

/**
 * 재사용 가능한 컴포넌트
 * @param className - 추가 CSS 클래스
 * @param variant - 컴포넌트 변형
 * @param size - 컴포넌트 크기
 * @param props - 기타 HTML 속성
 */
export function Component({ 
  className, 
  variant, 
  size, 
  ...props 
}: ComponentProps) {
  return (
    <div
      className={cn(componentVariants({ variant, size, className }))}
      {...props}
    />
  )
}
```

### Import 순서
1. React 관련 import
2. 외부 라이브러리
3. 내부 유틸리티 및 타입
4. 상대 경로 import

### 명명 규칙
- 컴포넌트 및 타입: PascalCase 사용
- 함수 및 변수: camelCase 사용
- 파일명: kebab-case 사용
- 상수: SCREAMING_SNAKE_CASE 사용
- **모든 변수와 함수에 한글 주석 필수**

## AI 기능 구현

### 채팅 인터페이스
- AI SDK의 `useChat` 훅 사용
- 적절한 메시지 처리 구현
- 타이핑 표시기 추가
- 스트리밍 응답 처리
- 오류 경계(Error Boundaries) 구현
- **모든 AI 상호작용에 한글 주석 및 오류 처리 필수**

### 폼 처리
- React Hook Form과 Zod 검증 사용
- 적절한 폼 컴포넌트 구현
- 로딩 상태 및 오류 처리 추가
- shadcn/ui Form 컴포넌트 활용
- **폼 검증 로직에 한글 주석 추가**

### 상태 관리
- 전역 상태에 React Context 사용
- 적절한 TypeScript context 패턴 구현
- 복잡한 상태 로직에 useReducer 사용
- 사용 위치에 가까운 상태 배치
- **상태 변경 로직에 한글 주석 필수**

## UI/UX 가이드라인

### 접근성
- 시맨틱 HTML 요소 사용
- 적절한 ARIA 속성 구현
- 키보드 내비게이션 보장
- shadcn/ui 접근성 패턴 준수
- 스크린 리더 테스트

### 반응형 디자인
- 모바일 우선 접근법
- Tailwind 반응형 접두사 사용
- 다양한 화면 크기에서 테스트
- 적절한 터치 타겟 구현

### 로딩 상태
- 로딩에 Skeleton 컴포넌트 사용
- 적절한 오류 경계 구현
- AI 작업에 적절한 피드백 표시
- 알림에 Sonner 사용

## 성능 최적화

### 코드 분할
- 대형 컴포넌트에 동적 import 사용
- 적절한 지연 로딩 구현
- Next.js Image 컴포넌트 사용
- 번들 크기 최적화

### AI 작업
- 적절한 캐싱 전략 구현
- 긴 응답에 스트리밍 사용
- 적절한 타임아웃 처리 추가
- 재시도 로직 구현

## 오류 처리 (철저하게)

### 클라이언트 측
- Error Boundaries 사용
- 적절한 try-catch 블록 구현
- 사용자 친화적인 오류 메시지 표시
- 적절한 오류 로깅
- **모든 오류에 대한 한글 메시지 제공**

### API 라우트
- 적절한 HTTP 상태 코드 사용
- 일관된 오류 응답 형식 구현
- 적절한 검증 추가
- AI API 오류 우아하게 처리
- **API 오류에 대한 상세한 한글 로깅**

## 테스트 전략

### 단위 테스트
- 컴포넌트 렌더링 테스트
- 사용자 상호작용 테스트
- AI SDK 훅 모킹
- 폼 검증 테스트
- **테스트 케이스에 한글 설명 추가**

### 통합 테스트
- AI 채팅 플로우 테스트
- 폼 제출 테스트
- API 라우트 테스트
- 오류 시나리오 테스트

## 보안 고려사항

### API 라우트
- 모든 입력 검증
- 속도 제한 구현
- 적절한 인증 사용
- AI 응답 정화
- **보안 관련 코드에 한글 주석 필수**

### 클라이언트 측
- 사용자 입력 검증
- XSS 공격 방지
- 민감한 데이터 적절히 처리
- 비밀 정보에 환경 변수 사용

## 개발 워크플로

### 코드 품질
- Next.js 구성과 함께 ESLint 사용
- 일관된 코드 포맷팅
- 의미 있는 커밋 메시지 작성
- 철저한 코드 리뷰
- **한글로 작성된 명확한 커밋 메시지**

### AI 개발
- AI 응답 철저히 테스트
- AI 상호작용의 예외 상황 처리
- 적절한 폴백 구현
- AI 사용량 및 비용 모니터링

## 공통 패턴

### 커스텀 훅 (함수형)
```typescript
/**
 * 커스텀 훅 예시
 * @returns 상태와 상태 변경 함수
 */
export function useCustomHook() {
  // 상태 정의
  const [state, setState] = React.useState()
  
  React.useEffect(() => {
    // 사이드 이펙트 로직
  }, [])
  
  return { state, setState }
}
```

### Context 패턴
```typescript
// Context 타입 정의
interface ContextType {
  // Context 구조 정의
}

// Context 생성
const Context = React.createContext<ContextType | null>(null)

/**
 * Context 사용을 위한 커스텀 훅
 * @returns Context 값
 * @throws Provider 없이 사용 시 에러
 */
export function useContext() {
  const context = React.useContext(Context)
  if (!context) {
    throw new Error("useContext는 Provider 내부에서 사용되어야 합니다")
  }
  return context
}
```

### AI 채팅 컴포넌트
```typescript
/**
 * AI 채팅 인터페이스 컴포넌트
 * @returns 채팅 UI 컴포넌트
 */
export function ChatComponent() {
  // AI SDK 훅 사용
  const { messages, input, handleInputChange, handleSubmit, isLoading } = useChat()
  
  return (
    <form onSubmit={handleSubmit}>
      {/* 메시지 표시 영역 */}
      <Input 
        value={input}
        onChange={handleInputChange}
        disabled={isLoading}
        placeholder="메시지를 입력하세요..."
      />
    </form>
  )
}
```

## 개발 시 기억사항

- **함수형 컴포넌트만 사용**
- **모든 코드에 한글 주석 필수**
- **Tailwind CSS만 사용하여 스타일링**
- **Shadcn/ui 컴포넌트 우선 활용**
- **오류 처리를 철저하게 구현**
- 기존 컴포넌트 패턴 항상 사용
- shadcn/ui 규칙 엄격히 준수
- 적절한 TypeScript 타입 구현
- AI 상호작용 철저히 테스트
- 일관된 코드 스타일 유지
- 시맨틱 HTML 및 적절한 접근성 사용
- 성능 및 사용자 경험 최적화
- 모든 레벨에서 오류를 우아하게 처리
